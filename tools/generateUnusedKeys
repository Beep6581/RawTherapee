#!/usr/bin/env bash

# This script is part of RawTherapee.
#
# This Bash4 script checks whether each key in "default" is used in
# a .cc or .h file. Those that are not are printed to screen, and the
# user is asked if they should be deleted from all language files.
#
# Keys in commented-out sections "//" are ignored.
#
# Some concatenated keys are ignored, these need to be added to the list manually:
#   HISTORY_MSG_
#   EXTPROGTARGET_
#   FILEBROWSER_POPUPRANK
#   FILEBROWSER_POPUPCOLORLABEL
#   SAMPLEFORMAT_
#   TP_RAW_[demosaic_method]
#
# The script can also clean up already-translated files by removing keys which
# do not exist in default.
#
# Run the script from the project root:
#   ./tools/generateUnusedKeys
#
# Run ./tools/generateTranslationDiffs before and after running this script.
# Double-check the deletion before committing.
#
# Blame DrSlony

tmp=temp_file
if [[ -w $tmp ]]; then
  rm -v "$tmp"
fi

abort () {
  printf '%s\n' "" "Aborted" "Removing leftover files:"
  [[ -e "$tmp" ]] && rm "$tmp"
  rm -v --interactive=once sed*
  exit 1
}

trap 'abort' HUP INT QUIT ABRT TERM

cd "rtdata/languages" || { printf '%s\n' "You must run this script from the root of the project."; exit 1; }
# Build array of all interface translation files, or use user-specified ones only
unset langFiles
if [[ $# = 0 ]]; then
  while read -r; do
    langFiles+=("$REPLY")
  done < <(find . -not -iname "LICENSE" -not -iname "README" -not -iname "*.sh"  -not -iname ".*" -not -iname "$tmp" | sort)
else
  langFiles=("$@")
  for langFile in "${langFiles[@]}"; do
    if [[ ! -w $langFile ]]; then
      printf '%s\n' "File \"$langFile\" not found or not writable." ""
      exit 1
    fi
  done
fi

dos2unix default 2>/dev/null

# In the code block below, the grep/sed outside the loop lists keys to ignore.
# Exit status 1 (failure) means key not found in code, destined for deletion.
# The piped grep inside the loop checks the initial match for known comment markers "//".
# Sometimes a key is first found in a comment, and then the same key is found
# in active code, therefore -m1 (stop reading after 1st match) cannot be used.
# To remove comment support, remove the piped grep and set first grep flags to
#   -Irl -m1
# Dynamically built keys like HISTORY_MSG_1 can't be grepped in the code,
# so it renames KEY_1-KEY_9 to KEY_ so that they can be grepped and therefore ignored.
# See RAWParams::BayerSensor::getMethodStrings
t1="$(date +%s)"
printf '%s\n' 'Matching keys in "default" against .cc and .h files' 'Unmatched keys follow:'
unset delLines
while read -r 'defLine'; do
  grep -Ir --include=\*.{cc,h} --exclude-dir="klt" "${defLine%%;*}" ../../* | grep -Ev "//.*${defLine%%;*}" &>/dev/null
  if [[ $? = 1 ]]; then
    printf '  %s\n' "${defLine%%;*}"
    delLines+=("${defLine%%;*}")
  fi
done < <( \
    grep -Ev -e "^(#|$)|HISTORY_MSG_" \
        -e "^(#|$)|TP_RAW_1PASSMEDIUM" \
        -e "^(#|$)|TP_RAW_2PASS" \
        -e "^(#|$)|TP_RAW_3PASSBEST" \
        -e "^(#|$)|TP_RAW_4PASS" \
        -e "^(#|$)|TP_RAW_AMAZE" \
        -e "^(#|$)|TP_RAW_AMAZEBILINEAR" \
        -e "^(#|$)|TP_RAW_AMAZEVNG4" \
        -e "^(#|$)|TP_RAW_RCD" \
        -e "^(#|$)|TP_RAW_RCDBILINEAR" \
        -e "^(#|$)|TP_RAW_RCDVNG4" \
        -e "^(#|$)|TP_RAW_DCB" \
        -e "^(#|$)|TP_RAW_DCBBILINEAR" \
        -e "^(#|$)|TP_RAW_DCBVNG4" \
        -e "^(#|$)|TP_RAW_LMMSE" \
        -e "^(#|$)|TP_RAW_IGV" \
        -e "^(#|$)|TP_RAW_AHD" \
        -e "^(#|$)|TP_RAW_EAHD" \
        -e "^(#|$)|TP_RAW_HPHD" \
        -e "^(#|$)|TP_RAW_VNG4" \
        -e "^(#|$)|TP_RAW_FAST" \
        -e "^(#|$)|TP_RAW_MONO" \
        -e "^(#|$)|TP_RAW_PIXELSHIFT" \
        -e "^(#|$)|TP_RAW_NONE" \
        "default" | \
    sed -e "s/EXTPROGTARGET_[0-9]*/EXTPROGTARGET_/" \
    -e "s/FILEBROWSER_POPUPCOLORLABEL[0-9]*/FILEBROWSER_POPUPCOLORLABEL/" \
    -e "s/FILEBROWSER_POPUPRANK[0-9]*/FILEBROWSER_POPUPRANK/" \
    -e "s/SAMPLEFORMAT_[0-9]*/SAMPLEFORMAT_/" \
    | sort -Vu)
t2="$(date +%s)"
tt=$((t2-t1))
printf '%s\n' "" "Scan took $tt seconds" "" "Double-checking the code for matched keys:"

for delLine in "${delLines[@]}"; do
  printf '%s\n' "$delLine"
  grep -Ir --include=\*.{cc,h} --exclude-dir="klt" "${delLine}" ../../*
done
echo

read -r -p 'Write results to "unmatched"? [y/n] '
if [[ $REPLY = y || $REPLY = Y ]]; then
  printf '%s\n' "${delLines[@]}" > unmatched
fi
printf '%s\n' ""

read -r -p "Delete ${#delLines[@]} keys from all ${#langFiles[@]} interface language files? [y/n] "
if [[ $REPLY = y || $REPLY = Y ]]; then
  printf '%s\n' "Removing keys from:"
  i=1
  ttot1="$(date +%s)"
  for file in "${langFiles[@]}"; do
    printf "%02d - ${file#.*/}" "$i"
    t1="$(date +%s)"
    for key in "${delLines[@]}"; do
      sed -i "/.\?$key/d" "$file"
    done
    t2="$(date +%s)"
    tt=$((t2-t1))
    printf '%s\n' " - took $tt seconds"
    ((i++))
  done
  ttot2="$(date +%s)"
  ttot=$((ttot2-ttot1))
  tsec=$((ttot%60))
  tmin=$((ttot/60))
  printf '%s\n' "Finished updating ${#langFiles[@]} files." "Total time: ${tmin}m ${tsec}s"
fi

printf '%s\n' "" "The above cleaned up \"default\" from keys not found in the code and then it removed the same keys from the translation files. However if the translation files contain keys which were not in \"default\" then they would remain (because it would take too long to scan the source code for each key in each translation). Since at this point \"default\" is good as gold, it's most time efficient then to match each interface translation file against it and remove all keys not found in it." "" | fold -s
read -r -p "Match ${#langFiles[@]} interface translation files against \"default\" and delete unmatched keys? [y/n] "
if [[ $REPLY = y || $REPLY = Y ]]; then
  printf '%s\n' "Removing keys from:"
  i=1
  ttot1="$(date +%s)"
  for file in "${langFiles[@]}"; do
    printf "%02d - ${file#.*/}" "$i"
    t1="$(date +%s)"
    unset delLines
    # Read line by line
    while read -r line; do
      # If line starts with a real key, not a comment or empty line
      if [[ $line =~ ^[A-Z0-9_]+\; ]]; then
        # then get the key part
        key="${line%%;*}"
        # quietly check whether it exists in default
        grep -Irq "$key" default
        # and if match fails, put it on the kill list
        if [[ $? = 1 ]]; then
          delLines+=("${key}")
        fi
      fi
    done < "$file"
    # kill szeva
    for key in "${delLines[@]}"; do
      sed -i "/.\?$key/d" "$file"
    done
    t2="$(date +%s)"
    tt=$((t2-t1))
    printf '%s\n' " - took $tt seconds"
    ((i++))
  done
  ttot2="$(date +%s)"
  ttot=$((ttot2-ttot1))
  tsec=$((ttot%60))
  tmin=$((ttot/60))
  printf '%s\n' "Finished updating ${#langFiles[@]} files." "Total time: ${tmin}m ${tsec}s"
fi

