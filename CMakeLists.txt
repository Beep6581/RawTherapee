cmake_minimum_required(VERSION 2.6)

set (CMAKE_BUILD_TYPE Debug CACHE STRING "One of: None Debug Release RelWithDebInfo MinSizeRel.")

if (WIN32)
    set(CMAKE_PREFIX_PATH $ENV{MINGW_BASEPATH} $ENV{GTKMM_BASEPATH} CACHE STRING "Additional search paths")
endif (WIN32)

if (APPLE)
#    SET (CMAKE_OSX_ARCHITECTURES "i386;x86_64;" )
#    SET (CMAKE_TRY_COMPILE_OSX_ARCHITECTURES "i386;x86_64;" )
    SET (CMAKE_OSX_SYSROOT "/Developer/SDKs/MacOSX10.5.sdk")
    SET (CMAKE_OSX_DEPLOYMENT_TARGET "10.5")
endif (APPLE)

option (BUILD_SHARED "Build rawtherapee with shared libraries" OFF)
option (WITH_RAWZOR "Build with Rawzor support" OFF)
option (WITH_MYFILE_MMAP "Build using memory mapped file" ON)
option (OPTION_OMP "Build with OpenMP support" ON)

# set install directories
if (NOT DEFINED DATADIR)
    if (WIN32 OR APPLE)
        set (DATADIR ${CMAKE_CURRENT_SOURCE_DIR}/release)
    else (WIN32 OR APPLE)
        set (DATADIR ${CMAKE_INSTALL_PREFIX}/share/rawtherapee)
    endif (WIN32 OR APPLE)
endif (NOT DEFINED DATADIR)

if (NOT DEFINED BINDIR)
    if (WIN32 OR APPLE)
        set (BINDIR  ${CMAKE_CURRENT_SOURCE_DIR}/release)
    else (WIN32 OR APPLE)
        set (BINDIR  ${CMAKE_INSTALL_PREFIX}/bin)
    endif (WIN32 OR APPLE)
endif (NOT DEFINED BINDIR)

if (NOT DEFINED LIBDIR)
    if (WIN32 OR APPLE)
        set (LIBDIR ${CMAKE_CURRENT_SOURCE_DIR}/release)
    else (WIN32 OR APPLE)
        set (LIBDIR ${CMAKE_INSTALL_PREFIX}/lib)
    endif (WIN32 OR APPLE)
endif (NOT DEFINED LIBDIR)

# check for libraries
find_package(PkgConfig)
pkg_check_modules (GTK     REQUIRED gtk+-2.0>=2.12)
pkg_check_modules (GLIB2   REQUIRED glib-2.0>=2.16)
pkg_check_modules (GLIBMM  REQUIRED glibmm-2.4>=2.16)
pkg_check_modules (GTKMM   REQUIRED gtkmm-2.4>=2.12)
pkg_check_modules (GIO     REQUIRED gio-2.0>=2.16)
pkg_check_modules (GIOMM   REQUIRED giomm-2.4>=2.12)
pkg_check_modules (GTHREAD REQUIRED gthread-2.0>=2.16)
pkg_check_modules (GOBJECT REQUIRED gobject-2.0>=2.16)
pkg_check_modules (SIGC    REQUIRED sigc++-2.0)
# NOTE: The new mechanism has been tested with BUILD_SHARED = OFF
if (WIN32)
    add_definitions (-DWIN32)
    add_definitions (-D_WIN32)
    if (MINGW)
        add_definitions (-D__MINGW32__)
    endif (MINGW)

    set (EXTRA_LIB "-lws2_32")
else (WIN32)
endif (WIN32)
pkg_check_modules (IPTCDATA REQUIRED libiptcdata)
pkg_check_modules (LCMS REQUIRED lcms2)
find_package (JPEG REQUIRED)
find_package (PNG REQUIRED)
find_package (TIFF REQUIRED)
find_package (ZLIB REQUIRED)

# link rawzor
if (WITH_RAWZOR)
    set (EXTRA_INCDIR ${EXTRA_INCDIR} "${CMAKE_CURRENT_SOURCE_DIR}/rawzor")
    add_definitions (-DRAWZOR_SUPPORT)
    if (WIN32)
        if (CMAKE_SIZEOF_VOID_P EQUAL 4)
            set (EXTRA_LIBDIR ${EXTRA_LIBDIR} "${CMAKE_CURRENT_SOURCE_DIR}/rawzor/win32")
            set (EXTRA_LIB ${EXTRA_LIB} "rwz_sdk.lib")
            install (FILES ${CMAKE_CURRENT_SOURCE_DIR}/rawzor/win32/rwz_sdk.dll DESTINATION ${BINDIR}
                PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ)
        elseif (CMAKE_SIZEOF_VOID_P EQUAL 8)
            set (EXTRA_LIBDIR ${EXTRA_LIBDIR} "${CMAKE_CURRENT_SOURCE_DIR}/rawzor/win64")
            set (EXTRA_LIB ${EXTRA_LIB} "rwz_sdk.lib")
            install (FILES ${CMAKE_CURRENT_SOURCE_DIR}/rawzor/win64/rwz_sdk.dll DESTINATION ${BINDIR}
                PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ)
        endif (CMAKE_SIZEOF_VOID_P EQUAL 4)
    elseif (APPLE)
        if (CMAKE_SIZEOF_VOID_P EQUAL 4)
            set (EXTRA_LIBDIR ${EXTRA_LIBDIR} "${CMAKE_CURRENT_SOURCE_DIR}/rawzor/mac32")
            set (EXTRA_LIB "-lrwz_sdk")
            install (FILES ${CMAKE_CURRENT_SOURCE_DIR}/rawzor/mac32/rwz_sdk.dylib DESTINATION ${LIBDIR}
                PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ)
        elseif (CMAKE_SIZEOF_VOID_P EQUAL 8)
            set (EXTRA_LIBDIR ${EXTRA_LIBDIR} "${CMAKE_CURRENT_SOURCE_DIR}/rawzor/mac64")
            set (EXTRA_LIB "-lrwz_sdk_64")
            install (FILES ${CMAKE_CURRENT_SOURCE_DIR}/rawzor/mac64/rwz_sdk_64.dylib DESTINATION ${LIBDIR}
                PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ)
        endif (CMAKE_SIZEOF_VOID_P EQUAL 4)
    else (WIN32)
        if (CMAKE_SIZEOF_VOID_P EQUAL 4)
            set (EXTRA_LIBDIR ${EXTRA_LIBDIR} "${CMAKE_CURRENT_SOURCE_DIR}/rawzor/lin32")
            set (EXTRA_LIB ${EXTRA_LIB} "-lrwz_sdk")
            install (FILES ${CMAKE_CURRENT_SOURCE_DIR}/rawzor/lin32/librwz_sdk.so DESTINATION ${LIBDIR}
                PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ RENAME rwz_sdk.so)
        elseif (CMAKE_SIZEOF_VOID_P EQUAL 8)
            set (EXTRA_LIBDIR ${EXTRA_LIBDIR} "${CMAKE_CURRENT_SOURCE_DIR}/rawzor/lin64")
            set (EXTRA_LIB ${EXTRA_LIB} "-lrwz_sdk")
            install (FILES ${CMAKE_CURRENT_SOURCE_DIR}/rawzor/lin64/librwz_sdk.so DESTINATION ${LIBDIR}
                PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ RENAME rwz_sdk.so)
        endif (CMAKE_SIZEOF_VOID_P EQUAL 4)
    endif (WIN32)
endif (WITH_RAWZOR)

if (WITH_MYFILE_MMAP)
	add_definitions (-DMYFILE_MMAP)
endif (WITH_MYFILE_MMAP)

if (OPTION_OMP)
    find_package(OpenMP)
    if (OPENMP_FOUND)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    endif (OPENMP_FOUND)
endif (OPTION_OMP)

if (UNIX)
    install (PROGRAMS rtstart DESTINATION ${BINDIR})
endif (UNIX)

add_subdirectory (rtexif)
add_subdirectory (rtengine)
add_subdirectory (rtgui)
add_subdirectory (rtdata)
